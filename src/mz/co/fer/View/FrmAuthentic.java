package mz.co.fer.View;

import mz.co.fer.DAO.UtilizadorDAO;
import mz.co.fer.DTO.Utilizador;
import mz.co.fer.Relatorios.ImpressoraRecibo;
import java.awt.Frame;
import java.awt.Window;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import mz.co.fer.DAO.AuthorizedDAO;
import mz.co.fer.DAO.EntradaDeStockDAO;
import mz.co.fer.DAO.ProdutoDAO;
import mz.co.fer.DTO.Authorized;
import mz.co.fer.DTO.EntradaDeStock;
import mz.co.fer.DTO.Produto;
import mz.co.fer.enums.Operacao;

/**
 *
 * @author Deockilion
 */
public class FrmAuthentic extends javax.swing.JDialog {

    private String supervisor;
    private Operacao operacao;
    private Produto produto;
    private ProdutoDAO prodDao = new ProdutoDAO();
    private AuthorizedDAO auDAO = new AuthorizedDAO();
    private Authorized au;
    private EntradaDeStock entradaStock;
    private EntradaDeStockDAO entradaStockDAO = new EntradaDeStockDAO();
    private double qtdAnterior;
    private double qtdAtual;
    private String id;

    /**
     * Creates new form Authentic
     *
     * @param parent
     * @param modal
     */
    public FrmAuthentic(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

    }

    public void nomeSupervisor(String nomeCompleto) {
        this.supervisor = nomeCompleto;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        jbtAutorizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Autorizar");
        setBackground(new java.awt.Color(102, 102, 102));
        setModal(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setText("USERNAME:");

        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        jLabel2.setText("PASSWORD:");

        txtSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSenhaActionPerformed(evt);
            }
        });

        jbtAutorizar.setText("Autorizar");
        jbtAutorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAutorizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbtAutorizar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(txtUser, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                        .addComponent(txtSenha)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtAutorizar)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtAutorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAutorizarActionPerformed
        String username, senha_usuario;
        username = txtUser.getText();
        senha_usuario = String.valueOf(txtSenha.getPassword());

        Utilizador obUserDto = new Utilizador();
        obUserDto.setUsername(username);
        obUserDto.setSenha(senha_usuario);
        UtilizadorDAO objUserDao = new UtilizadorDAO();
        ResultSet rsuserdao = objUserDao.autenticacaoDoUtilizador(obUserDto);

        try {
            if (rsuserdao.next()) {

                Utilizador utilizador = objUserDao.retornar(username);
                supervisor = objUserDao.procurarNomeCompleto(username);

                //AuthorizedDAO auDAO = new AuthorizedDAO();
                if (utilizador.isAcessoAdmin() || utilizador.isAcessoGestao()) {

                    if (null != operacao) {
                        switch (operacao) {
                            case TROCA -> {
                                FrmReturn vReturn = new FrmReturn((Frame) getParent(), true);
                                vReturn.nomeSupervisor(supervisor);
                                vReturn.setVisible(true);
                                au = new Authorized(supervisor, "TROCA");
                                auDAO.save(au);
                                dispose();
                            }
                            case DESCONTO -> {
                                FrmDesconto vDesconto = new FrmDesconto((Frame) getParent(), true);
                                vDesconto.setVisible(true);
                                au = new Authorized(supervisor, "DESCONTO");
                                auDAO.save(au);
                                dispose();
                            }
                            case REPRINT -> {
                                new ImpressoraRecibo().reprintLastSale();
                                au = new Authorized(supervisor, "REPRINT");
                                auDAO.save(au);
                                dispose();
                            }
                            case REPRINTID -> {
                                new ImpressoraRecibo().reprintSaleById(id);
                                au = new Authorized(supervisor, "Reprint pelo ID");
                                auDAO.save(au);
                                dispose();
                            }
                            case CHANGEPRICE -> {
                                prodDao.update(produto, Operacao.PRECO_VENDA);
                                JOptionPane.showMessageDialog(this, "Preço do Produto actualizado com sucesso!");
                                ((FrmGestaoDeEstoque) getParent()).readJTable();
                                au = new Authorized(supervisor, "Alterou Preço");
                                auDAO.save(au);
                                dispose();
                            }
                            case ADDQTD -> {
                                entradaStock = new EntradaDeStock(supervisor, "NOVO STOCK", produto.getCodigo(), (float) qtdAnterior, (float) qtdAtual);
                                entradaStockDAO.save(entradaStock);
                                prodDao.update(produto, Operacao.QTD_ARMAZEM);
                                ((FrmGestaoDeEstoque) getParent()).readJTable();
                                dispose();
                            }
                            case TRANSFERIR -> {
                                entradaStock = new EntradaDeStock(supervisor, "TRANSFERIR STOCK", produto.getCodigo(), (float) qtdAnterior, (float) qtdAtual);
                                entradaStockDAO.save(entradaStock);
                                prodDao.update(produto, Operacao.QTD_ARMAZEM);
                                prodDao.update(produto, Operacao.QUANTIDADE_LOJA);
                                ((FrmGestaoDeEstoque) getParent()).readJTable();
                                dispose();
                            }
                            case CODIGO -> {
                                prodDao.update(produto, Operacao.CODIGO);
                                JOptionPane.showMessageDialog(this, "Código do Produto alterado com sucesso!");
                                ((FrmGestaoDeEstoque) getParent()).readJTable();
                                au = new Authorized(supervisor, "Alterou Código do Produto");
                                auDAO.save(au);
                                dispose();
                            }
                            case PROMOCAO -> {
                                FrmPromocao promocao = new FrmPromocao((Frame) getParent(), true);
                                promocao.setSupervisor(supervisor);
                                promocao.setVisible(true);
                                dispose();
                            }
                            case CALCULAR -> {
                                // Obtém todas as janelas filhas do FrmCaixa
                                Window[] janelasFilhas = ((Frame) getParent()).getOwnedWindows();

                                // Procura pela instância de PagamentoDinheiro entre as janelas filhas
                                for (Window janela : janelasFilhas) {
                                    if (janela instanceof PagamentoDinheiro) {
                                        PagamentoDinheiro pagamentoDinheiro = (PagamentoDinheiro) janela;
                                        pagamentoDinheiro.calcularTroco();
                                        break;
                                    }
                                }

                                au = new Authorized(supervisor, "DEVOLUÇÃO");
                                auDAO.save(au);
                                dispose();
                            }
                            case ABRIRCONTA -> {
                                ((FrmCaixa) getParent()).abrirConta();
                                au = new Authorized(supervisor, "ABRIR CONTA");
                                auDAO.save(au);
                                dispose();
                            }
                            case DESCRICAOP -> {
                                prodDao.update(produto, Operacao.DESCRICAOP);
                                ((FrmGestaoDeEstoque) getParent()).readJTable();
                                au = new Authorized(supervisor, "Alterou Descrição do Produto");
                                auDAO.save(au);
                                dispose();
                            }
                            case VD -> {
                                au = new Authorized(supervisor, "Impressão de VD");
                                auDAO.save(au);
                                FrmQuote quote = new FrmQuote((Frame) getParent(), true);
                                quote.setOperacao(Operacao.VD);
                                quote.setVisible(true);
                                dispose();
                            }
                            case TYPE -> {
                                prodDao.update(produto, Operacao.TYPE);
                                au = new Authorized(supervisor, "Alterou a categoria do Produto");
                                auDAO.save(au);
                                dispose();
                            }

                            default -> {
                            }
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Utilizador não autorizado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Acesso Negado!", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbtAutorizarActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        txtSenha.requestFocus();
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSenhaActionPerformed
        jbtAutorizarActionPerformed(evt);
    }//GEN-LAST:event_txtSenhaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtAutorizar;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    /**
     * @param operacao the operacao to set
     */
    public void setOperacao(Operacao operacao) {
        this.operacao = operacao;
    }

    /**
     * @param produto the produto to set
     */
    public void setProduto(Produto produto) {
        this.produto = produto;
    }

    /**
     * @param qtdAnterior the qtdAnterior to set
     */
    public void setQtdAnterior(double qtdAnterior) {
        this.qtdAnterior = qtdAnterior;
    }

    /**
     * @param qtdAtual the qtdAtual to set
     */
    public void setQtdAtual(double qtdAtual) {
        this.qtdAtual = qtdAtual;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

}
